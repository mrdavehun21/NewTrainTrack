<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Vehcile logs</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    </head>
<body>
    <div class="modal fade" id="noDataModal" tabindex="-1" aria-labelledby="noDataModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="noDataModalLabel">Értesítések</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="noDataModalBody">
              <!-- Message will be inserted here dynamically -->
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
    </div>
    

    <div class="container-fluid">
        <div class="row col-6" id="list"></div>
    </div>

    <script>

        // Function to show the no-data/error modal with a custom message
        function showNoDataModal(message) {
            const modalBody = document.getElementById('noDataModalBody');
            modalBody.textContent = message;
            const noDataModal = new bootstrap.Modal(document.getElementById('noDataModal'));
            noDataModal.show();
        }
        function isset(licensePlatePart) {
            return typeof licensePlatePart !== 'undefined' && licensePlatePart !== null;
        }

        function fetchData() {
            const listContainer = document.getElementById('list');
            // Clear the existing content in the list
            listContainer.innerHTML = '';


            fetch('/log', { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(response => response.json())
                .then(data => {
                    if (data.vehicles && data.vehicles.length > 0) {
                        data.vehicles.forEach(vehicle => {
                            let [part1, part2] = vehicle.licensePlate.split("-");
                            const items = data.licensePlates.filter(item => item.palyaszam.includes(part1) || item.palyaszam.includes(part2));

                            // Adjust and format the first half of the license plate (eg: 1123-1124)
                            part1 = part1 % 2 == 0 ? part1 : parseInt(part1) + 1;
                            const palyaszam1 = parseInt(part1) - 1 + '-' + (parseInt(part1) + 400) / 2 + '-' + part1;
                            
                            // Format the second half of the license plate if it exists (eg: 1149-1150)
                            if(isset(part2)){
                                part2 = part2 % 2 == 0 ? part2 : parseInt(part2) + 1;
                                palyaszam2 = parseInt(part2) - 1 + '-' + (parseInt(part2) + 400) / 2 + '-' + part2;
                            }

                            // Format each `palyaszam` as "A-B C-D" or just "A-B"
                            const palyaszamFormatted = items.map(item => `${item.palyaszam[0]}-${item.palyaszam[1]}`).join(' ');

                            const listItem = document.createElement('button');

                            if(!palyaszamFormatted || palyaszamFormatted.trim() === ""){
                                listItem.classList.add('btn', 'btn-danger', 'mb-2');
                                listItem.innerHTML = `
                                        <span>${vehicle.licensePlate}</span>`;
                            } else{
                                listItem.classList.add('btn', 'btn-success', 'mb-2');
                                listItem.innerHTML = `
                                        <span>${palyaszamFormatted}</span>`;
                            }

                            // Append the created button to the list container
                            listContainer.appendChild(listItem);

                        });
                    }else{
                        // Show modal if no vehicles are available
                        showNoDataModal("Nincs elérhető adat jelenleg.");
                    }
            }).catch(error => {
                console.error('Error fetching data:', error);
                // Show modal in case of an error
                showNoDataModal("Hiba történt az adatok betöltése közben. Próbálja újra később.");
            });
        }

        // Fetch the vehicle data on page load
        fetchData();

        // Refresh data every 30 seconds (30000 milliseconds)
        setInterval(fetchData, 30000);
    </script>

</body>
</html>